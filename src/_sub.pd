#N canvas 583 63 705 724 12;
#X declare -path ./lib -path ./lib/abs -path ./lib/fd_lib -lib Gem
-lib timbreID/timbreIDLib -path ./lib/pix_opencv;
#N canvas 0 22 609 385 facetracker 0;
#X obj 25 70 pix_video;
#X obj 25 95 pix_rgba;
#X msg 38 195 settab ALL_FEATURES raw \, show 0;
#X obj 25 120 t a b;
#X obj 38 171 t b b;
#X msg 86 171 0;
#X obj 38 146 spigot 1;
#X obj 25 45 gemhead 1;
#X obj 25 16 inlet;
#X obj 45 222 r facetracker;
#X msg 381 59 tolerance \$1;
#X floatatom 381 32 5 0 0 0 - - -, f 5;
#X floatatom 293 32 5 0 0 0 - - -, f 5;
#X msg 293 59 clamp \$1;
#X msg 202 59 filter \$1;
#X floatatom 202 32 5 0 0 0 - - -, f 5;
#X obj 295 101 s facetracker;
#X obj 25 320 s done_raw;
#X obj 25 287 bang;
#X text 118 337 <-- once finished \, sends a 'bang';
#X text 192 10 other parameters to tinker with;
#X text 293 253 <-- written to array named 'raw';
#X text 248 216 face detection is done here \, and is;
#X obj 25 252 pix_opencv/pix_opencv_facetracker;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 23 0;
#X connect 3 0 23 0;
#X connect 3 1 6 0;
#X connect 4 0 2 0;
#X connect 4 1 5 0;
#X connect 5 0 6 1;
#X connect 6 0 4 0;
#X connect 7 0 0 0;
#X connect 8 0 7 0;
#X connect 9 0 23 0;
#X connect 10 0 16 0;
#X connect 11 0 10 0;
#X connect 12 0 13 0;
#X connect 13 0 16 0;
#X connect 14 0 16 0;
#X connect 15 0 14 0;
#X connect 18 0 17 0;
#X connect 23 0 18 0;
#X restore 101 126 pd facetracker;
#X obj 101 107 tgl 15 1 empty detect detect 17 7 0 10 -262144 -1 -1
1 1;
#X obj 204 166 tgl 15 1 empty draw_face draw_raw 17 7 0 10 -262144
-1 -1 1 1;
#X msg 480 127 \; facetracker reset;
#N canvas 242 236 650 363 init 0;
#X msg 81 229 0;
#X obj 68 257 gemwin 20;
#X obj 53 150 loadbang;
#X text 155 247 20 fps;
#X text 18 6 libraries to use:;
#X text 41 121 the 'Gem' window (screen);
#X text 21 31 Gem \, timbreID (W.Brent) \, pix_opencv (A.Villeret)
;
#X text 36 282 pix_opencv has the facetracker already for pd;
#X msg 68 180 create \, 1 \; pd dsp 1;
#X msg 293 177 0 \, destroy \, fullscreen 2 \, create \, 1;
#X text 301 150 use as separate display \, fullscreen;
#X obj 21 59 declare -path ./lib -path ./lib/abs -path ./lib/fd_lib
-lib Gem -lib timbreID/timbreIDLib -path ./lib/pix_opencv;
#X connect 0 0 1 0;
#X connect 2 0 8 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X restore 100 666 pd init;
#N canvas 474 50 616 526 more_info 0;
#X obj 76 40 r done_raw;
#X obj 76 65 array get raw;
#X obj 75 126 tID_std;
#X floatatom 75 151 5 0 0 0 - - -, f 5;
#X floatatom 196 152 5 0 0 0 - - -, f 5;
#X obj 196 127 tID_mean;
#X obj 76 90 t a a;
#X floatatom 84 432 5 0 0 0 - - -, f 5;
#X floatatom 247 425 5 0 0 0 - - -, f 5;
#X text 66 460 Outlet 1: spectrum harmonicity;
#X text 66 480 Outlet 2: spectrum inharmonicity;
#X obj 324 224 vsl 15 128 20 20000 1 0 empty empty empty 0 -9 0 10
-262144 -1 -1 0 1;
#X floatatom 324 360 0 0 0 0 Hz - -;
#X obj 66 317 r done_raw;
#X obj 81 403 specHarmonicity raw;
#X obj 178 316 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 178 336 input_fund \$1;
#X text 51 176 standard dev;
#N canvas 0 22 542 473 help 0;
#X text 23 28 [specHarmonicity~] quantifies how harmonically and inharmonically
spectral peaks are aligned. It does this by finding significant spectral
peaks (based on a percent threshold parameter) \, and then seeing how
well they align with peaks expected for a given fundamental. When the
"input_fund" feature is active \, the fundamental frequency (in Hz)
can be supplied via the right inlet using whatever pitch detection
method you prefer (e.g. \, [sigmund~ pitch] \, [cepstrumPitch~] \,
etc.). Alternatively \, [specHarmonicity~] will assume that the lowest
non-DC peak in the spectrum is the fundamental. This could be useful
for cases when the spectrum is relatively inharmonic (and therefore
may not work well with pitch-tracking algorithms) \, but you still
want some measure of harmonicity.;
#X text 18 278 The two outlets supply separate harmonicity and inharmonicity
measurements between 0 and 1 \, with -1 being output when the algorithm
fails due to inappropriate input like silence. At left \, you can activate
either a very harmonic sawtooth signal \, or a signal concocted to
be inharmonic. The "input_fund" feature is disabled by default \, but
you can enable it to use pitch tracking output from [sigmund~].;
#X restore 434 428 pd help;
#X text 371 396 specHarmonicity help:;
#X text 89 286 specHarmonicity;
#X connect 0 0 1 0;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 5 0 4 0;
#X connect 6 0 2 0;
#X connect 6 1 5 0;
#X connect 11 0 12 0;
#X connect 12 0 14 1;
#X connect 13 0 14 0;
#X connect 14 0 7 0;
#X connect 14 1 8 0;
#X connect 15 0 16 0;
#X connect 16 0 14 0;
#X restore 99 591 pd more_info;
#X text 98 236 The face data is now on array named 'raw' -->;
#N canvas 520 25 667 668 spectrum_stuff_1 0;
#X obj 68 129 r done_raw;
#X obj 69 160 magSpec raw;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-magSpec-graph 129 float 0;
#X coords 0 0.25 128 0 200 140 1 0 0;
#X restore 228 112 graph;
#N canvas 205 170 463 267 do-plotting 0;
#X obj 79 37 inlet;
#X obj 79 173 list prepend 0;
#X obj 203 116 list length;
#X obj 203 138 change;
#X obj 203 160 pack f \$0;
#X obj 79 59 t l l;
#X obj 79 194 s \$0-magSpec-graph;
#X msg 203 181 \; \$2-magSpec-graph resize \$1 \;;
#X connect 0 0 5 0;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 5 0 1 0;
#X connect 5 1 2 0;
#X restore 69 193 pd do-plotting;
#X obj 61 340 cepstrum raw;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-cepstrum-graph 129 float 0;
#X coords 0 0.5 128 -0.25 200 140 1 0 0;
#X restore 229 286 graph;
#N canvas 0 50 584 308 do-plotting 0;
#X obj 79 37 inlet;
#X obj 79 59 t b l l;
#X obj 130 173 list prepend 0;
#X obj 254 116 list length;
#X obj 254 138 change;
#X obj 254 160 pack f \$0;
#X msg 254 181 \; \$2-cepstrum-graph resize \$1 \;;
#X obj 130 194 s \$0-cepstrum-graph;
#X obj 79 253 tabletool \$0-cepstrum-graph;
#X msg 79 231 clip -0.25 0.5;
#X text 181 221 clip to graph bounds because first value in cepstrum
is often extremely low;
#X connect 0 0 1 0;
#X connect 1 0 9 0;
#X connect 1 1 2 0;
#X connect 1 2 3 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 9 0 8 0;
#X restore 60 367 pd do-plotting;
#X obj 60 311 r done_raw;
#X obj 70 498 dct raw;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-dct-graph 256 float 0;
#X coords 0 1 255 -1 200 140 1 0 0;
#X restore 226 464 graph;
#N canvas 205 170 463 267 do-plotting 0;
#X obj 79 37 inlet;
#X obj 79 173 list prepend 0;
#X obj 203 116 list length;
#X obj 203 138 change;
#X obj 203 160 pack f \$0;
#X obj 79 59 t l l;
#X obj 79 194 s \$0-dct-graph;
#X msg 203 181 \; \$2-dct-graph resize \$1 \;;
#X connect 0 0 5 0;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 5 0 1 0;
#X connect 5 1 2 0;
#X restore 67 532 pd do-plotting;
#X obj 67 473 r done_raw;
#X text 450 150 from magSpec help;
#N canvas 0 22 560 386 help 0;
#X text 17 205 Audio buffering and windowing are taken care of by the
external \, so there is no need for tabreceive~ or block~. You can
set the window size with a creation argument \, or change it with the
"window" message. Window size is not required to be a power of two.
;
#X text 18 46 Magnitude spectrum can be measured with a combination
of basic Pd objects like fft~ \, *~ \, and sqrt~. However \, those
objects compute continuously \, and the final output is a signal vector.
magSpec~ does nothing until it receives a bang \, then it spits out
the magnitude spectrum for the most recent analysis window as a list.
The length of the magnitude spectrum list will be one half of the specified
window size plus one (N/2+1). magSpec~'s output is normalized to be
between 0 and 1 by default.;
#X restore 452 174 pd help;
#N canvas 0 22 560 386 help 0;
#X text 20 235 Audio buffering and windowing are taken care of by the
external \, so there is no need for tabreceive~ or block~. You can
set the window size with a creation argument \, or change it with the
"window" message. Window size is not required to be a power of two.
Cepstrum values are typically between 1 and -1 \, with the exception
of the first coefficient \, which is often much lower (here \, the
first value is clipped to -1 for convenience graphing).;
#X text 20 46 Real cepstrum is defined as the real portion of the IFT
of log magnitude spectrum. It is sometimes also defined as the real
part of the forward FT of log magnitude spectrum. This external applies
the former method \, and there is little difference between the two.
When cepstrum~ receives a bang \, it spits out (N/2)+1 cepstral coefficients
for the most recent analysis window as a list. The first dozen or so
coefficients from the cepstrum and its perceptually weighted relatives
mel-cepstrum and Bark-cepstrum are often used as compact feature vectors
to describe timbre.;
#X restore 458 346 pd help;
#X text 456 322 from cepstrum help;
#N canvas 0 22 588 338 help 0;
#X text 28 204 Audio buffering and windowing are taken care of by the
external \, so there is no need for tabreceive~ or block~. You can
set the window size with a creation argument \, or change it with the
"window" message. Window size is not required to be a power of two.
;
#X text 28 43 The discrete cosine transform (DCT) multiplies an incoming
window of audio against cosine basis functions. Unlike the Fourier
transform \, it outputs N purely real numbers \, so the length of the
DCT list will be the same as the specified window size \, N. [dct~]'s
output is normalized to be between -1 and 1 by default. timbreID 0.7
uses FFTW's FFTW_REDFT10 in a real-to-real 1-dimensional plan. This
is the same DCT-II algorithm used in previous timbreID releases \,
just more efficient.;
#X restore 460 500 pd help;
#X text 450 476 from dct help;
#X text 38 17 FEATURE:;
#X text 298 17 GRAPH;
#X text 508 17 HELP;
#X text 27 51 calls 'raw';
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 4 0 6 0;
#X connect 7 0 4 0;
#X connect 8 0 10 0;
#X connect 11 0 8 0;
#X restore 99 529 pd spectrum_stuff_1;
#N canvas 520 25 667 668 spectrum_stuff_2 0;
#X obj 68 129 r done_raw;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-barkSpec-graph 50 float 0;
#X coords 0 0.25 49 0 197 135 1 0 0;
#X restore 228 112 graph;
#N canvas 205 170 463 267 do-plotting 0;
#X obj 79 37 inlet;
#X obj 79 173 list prepend 0;
#X obj 203 116 list length;
#X obj 203 138 change;
#X obj 203 160 pack f \$0;
#X obj 79 59 t l l;
#X obj 79 194 s \$0-barkSpec-graph;
#X msg 203 181 \; \$2-barkSpec-graph resize \$1 \;;
#X connect 0 0 5 0;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 5 0 1 0;
#X connect 5 1 2 0;
#X restore 69 193 pd do-plotting;
#X obj 60 311 r done_raw;
#X obj 67 473 r done_raw;
#N canvas 0 22 560 386 help 0;
#X text 18 46 Bark-frequency spectrum is a warping of normal magnitude
or power spectrum to the Bark scale. This washes out some of the high
frequency resolution while maintaining detail on the low end. See magSpec~
for a point of comparison with linear frequency spectrum. When barkSpec~
receives a bang \, it spits out the Bark spectrum for the most recent
analysis window as a list.;
#X restore 452 174 pd help;
#N canvas 0 22 560 386 help 0;
#X text 20 46 Bark-frequency cepstrum is much different than raw cepstrum.
The most significant differences are an emphasis on lower spectral
content and the use of a DCT rather than a FT in the final step of
the process. When bfcc~ receives a bang \, it spits out the BFCCs for
the most recent analysis window as a list. The default half-Bark filterbank
spacing produces a 50-component BFCC vector regardless of window size.
BFCC components are normalized to be between 1 and -1 by default. If
normalized \, the first BFCC will always have a value of 1;
#X restore 458 346 pd help;
#N canvas 0 22 588 338 help 0;
#X text 28 43 Mel-frequency spectrum is a warping of normal magnitude
or power spectrum to the mel scale. This washes out some of the high
frequency resolution while maintaining detail on the low end. See magSpec~
for a point of comparison with linear frequency spectrum. When melSpec~
receives a bang \, it spits out the mel spectrum for the most recent
analysis window as a list. The default 100mel spacing produces a 38-component
vector regardless of window size. Mel spectrum components are normalized
to be between 0 and 1 by default.;
#X restore 460 500 pd help;
#X text 38 17 FEATURE:;
#X text 298 17 GRAPH;
#X text 508 17 HELP;
#X text 27 51 calls 'raw';
#X obj 69 160 barkSpec raw 0.5;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-bfcc-graph 50 float 0;
#X coords 0 1 49 -1 191 134 1 0 0;
#X restore 231 283 graph;
#N canvas 0 81 450 300 plotting 0;
#X obj 61 195 list prepend 0;
#X obj 61 91 t l l;
#X obj 185 138 list length;
#X obj 185 160 change;
#X obj 185 182 pack f \$0;
#X msg 185 203 \; \$2-bfcc-graph resize \$1 \;;
#X obj 61 216 s \$0-bfcc-graph;
#X obj 61 51 inlet;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 1 1 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 7 0 1 0;
#X restore 65 382 pd plotting;
#X obj 61 340 bfcc raw 0.5;
#X text 456 322 from bfcc help;
#X text 450 150 from barkSpec help;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-melSpec-graph 38 float 0;
#X coords 0 0.5 37 0 200 140 1 0 0;
#X restore 233 457 graph;
#N canvas 603 395 450 300 plotting 0;
#X obj 50 215 list prepend 0;
#X obj 50 111 t l l;
#X obj 204 158 list length;
#X obj 204 180 change;
#X obj 204 202 pack f \$0;
#X msg 204 223 \; \$2-melSpec-graph resize \$1 \;;
#X obj 50 236 s \$0-melSpec-graph;
#X obj 50 71 inlet;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 1 1 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 7 0 1 0;
#X restore 70 532 pd plotting;
#X obj 70 498 melSpec raw 100;
#X text 450 476 from melSpec help;
#X connect 0 0 12 0;
#X connect 3 0 15 0;
#X connect 4 0 20 0;
#X connect 12 0 2 0;
#X connect 15 0 14 0;
#X connect 20 0 19 0;
#X restore 99 549 pd spectrum_stuff_2;
#N canvas 559 248 701 326 calculate_fft 0;
#X obj 18 11 inlet;
#X obj 21 132 rfft~;
#X obj 21 95 tabreceive~ raw;
#X obj 58 163 tabsend~ imag;
#X obj 21 190 tabsend~ real;
#X obj 18 40 switch~ 256 2 1;
#X text 189 224 There is no normalization \, so that an FFT followed
by an IFFT has a gain of N.;
#X text 189 135 The real FFT outputs N/2+1 real parts and N/2-1 imaginary
parts. The other outputs are zero. At DC and at the Nyquist there is
no imaginary part \, but the second through Nth output is as a real
and imaginary pair \, which can be thought of as the cosine and sin
component strengths.;
#X text 188 42 The FFT objects do Fourier analyses and resyntheses
of incoming real or complex signals. Complex signals are handled as
pairs of signals (real and imaginary part.) The analysis size is one
block (you can use the block~ or switch~ objects to control block size).
;
#X text 187 15 from fft~-help:;
#X text 18 68 receives 'raw';
#X obj 23 244 bang~;
#X obj 23 269 s done_fft;
#X connect 0 0 5 0;
#X connect 1 0 4 0;
#X connect 1 1 3 0;
#X connect 2 0 1 0;
#X connect 11 0 12 0;
#X restore 102 359 pd calculate_fft;
#X text 243 359 writes imag/real here -->;
#X text 97 502 More spectral processing;
#X obj 102 338 tgl 15 1 empty fft fft 17 7 0 10 -262144 -1 -1 1 1;
#X obj 464 348 array define imag 128;
#X obj 464 368 array define real 128;
#X obj 472 233 array define raw 256;
#X obj 297 609 tgl 15 1 empty draw_stuff draw_stuff 17 7 0 10 -262144
-1 -1 1 1;
#X text 95 431 draw:;
#X text 134 179 draw:;
#X text 98 255 All processing is done from that array.;
#X text 226 127 <-- click to open;
#X text 473 208 'raw':;
#X text 477 101 click to reset face;
#X obj 305 415 tgl 15 1 empty draw_imag draw_imag 17 7 0 10 -262144
-1 -1 1 1;
#X obj 165 415 tgl 15 1 empty draw_real draw_real 17 7 0 10 -262144
-1 -1 1 1;
#X obj 447 546 symbol;
#X obj 447 571 pack s \$0;
#X msg 447 596 symbol \$2-\$1-graph;
#X obj 446 473 r stuff_graph;
#X text 232 627 draw:;
#X obj 542 549 r stuff_pos;
#X text 101 21 NOTE: see cursor shape \, make sure it's an arrow. If
it's a hand you're on 'edit mode' \, hit CMD+E to change.;
#N canvas 508 77 709 710 sendout 0;
#X obj 45 11 r done_raw;
#X obj 45 64 array get raw;
#X obj 45 89 list prepend raw;
#X obj 208 10 r done_fft;
#X obj 227 86 t b b;
#X obj 297 112 array get imag;
#X obj 296 148 list prepend imag;
#X obj 86 178 list trim;
#X obj 151 120 array get real;
#X obj 142 147 list prepend real;
#X obj 212 189 list trim;
#X obj 303 42 r sendout;
#X obj 245 43 spigot;
#X obj 135 23 r sendout;
#X obj 57 36 spigot;
#X obj 61 641 stdout;
#X obj 235 225 r \$0-magSpec-graph;
#X obj 204 350 r \$0-dct-graph;
#X obj 472 486 r sendout-cepstrum;
#X obj 238 272 list prepend magSpec;
#X obj 204 375 list prepend dct;
#X obj 214 440 r \$0-cepstrum-graph;
#X obj 224 529 r \$0-bfcc-graph;
#X obj 435 241 r \$0-barkSpec-graph;
#X obj 446 344 r \$0-melgSpec-graph;
#X obj 435 266 list prepend barkSpec;
#X obj 446 373 list prepend melSpec;
#X obj 214 465 list prepend cepstrum;
#X obj 223 555 list prepend bfcc;
#X obj 154 645 list trim;
#X obj 256 656 list prepend stuff;
#X obj 399 560 r stuff_graph;
#X obj 399 585 symbol;
#X obj 255 582 list trim;
#X obj 255 607 route cepstrum;
#X connect 0 0 14 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 12 0;
#X connect 4 0 8 0;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 6 0 10 0;
#X connect 7 0 15 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 15 0;
#X connect 11 0 12 1;
#X connect 12 0 4 0;
#X connect 13 0 14 1;
#X connect 14 0 1 0;
#X connect 16 0 19 0;
#X connect 17 0 20 0;
#X connect 18 0 33 0;
#X connect 19 0 33 0;
#X connect 20 0 33 0;
#X connect 21 0 27 0;
#X connect 22 0 28 0;
#X connect 23 0 25 0;
#X connect 24 0 26 0;
#X connect 25 0 33 0;
#X connect 26 0 33 0;
#X connect 27 0 33 0;
#X connect 28 0 33 0;
#X connect 29 0 15 0;
#X connect 30 0 29 0;
#X connect 31 0 32 0;
#X connect 32 0 34 1;
#X connect 33 0 34 0;
#X connect 34 0 30 0;
#X restore 100 640 pd sendout;
#X obj 204 185 _draw raw point;
#X obj 297 628 _draw \$0-magSpec-graph line;
#X obj 165 434 _draw real point;
#X obj 303 434 _draw imag point;
#X text 163 664 <-- set screen here;
#X connect 1 0 0 0;
#X connect 2 0 33 0;
#X connect 12 0 9 0;
#X connect 16 0 34 0;
#X connect 23 0 36 0;
#X connect 24 0 35 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 34 1;
#X connect 28 0 25 0;
#X connect 30 0 34 1;
